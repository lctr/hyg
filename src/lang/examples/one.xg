
~~ line comment

~~ Bool data type
~~ Constructors need not be capitalized, as they're accessed with sigils
~~ Note: A :: B => :B is of type A 
~~ However it's good practice to capitalize them
data Bool :: True | False

~~ access constructors with sigil prefix. Without the sigil, the following
~~ would always return :False, since `True` would be treated as a variable 
~~ pattern. 
not = case x of 
    :True -> :False
    :False -> :True

~~ lambda syntax is identical to that of Haskell.
~~ lambdas are curried, prefixed with `\`, have parameters space-separated, 
~~ and, after a `->`, have a body that extends as far to the right as possible
\a b -> a + b       ~~ this lambda
\a -> \b -> a + b   ~~ is equivalent to this lambda 